id_col_name: "Uniprot ID"
target_col_name: "SMILES_substrate_canonical_no_stereo"
split_col_name: "stratified_phylogeny_based_split_with_minor_products"
class_names: ["CC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O.CC(=C)CCOP(O)(=O)OP(O)(O)=O",
            "CC1(C)CCCC2(C)C1CCC(=C)C2CCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "C(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O.C(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O.CC(=C)CCOP(O)(=O)OP(O)(O)=O",
            "CC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCCC=C(C)CCC=C(C)CCC1OC1(C)C",
            "CC(C)=CCOP([O-])(=O)OP([O-])([O-])=O.CC(=C)CCOP(O)(=O)OP(O)(O)=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O",
            "CC(C)=CCCC(C)=CCCC(C)=CCOP([O-])(=O)OP([O-])([O-])=O.CC(=C)CCOP(O)(=O)OP(O)(O)=O", "precursor substr", "is_TPS"]
optimize_hyperparams: true
random_state: 0
n_calls_hyperparams_opt: 20
hyperparam_dimensions:
  max_features:
    type: "categorical"
    args: ["sqrt", None]
  class_weight:
    type: "categorical"
    args: ["balanced", "balanced_subsample"]
  max_depth:
    type: "int"
    args: [1, 100, "uniform"]
  min_samples_leaf:
    type: "int"
    args: [1, 30, "uniform"]
  n_estimators:
    type: "int"
    args: [50, 500, "uniform"]
  max_train_negs_proportion:
    type: "float"
    args: [0.5, 0.99, "log-uniform"]
n_estimators: 100
max_depth: 5
n_jobs: -1
class_weight: "balanced"
max_train_negs_proportion: 0.99
neg_val: "Unknown"
save_trained_model: true
negatives_sample_path: "data/sampled_id_2_seq.pkl"
tps_cleaned_csv_path: "data/TPS-Nov19_2023_verified_all_reactions_with_neg_with_folds.csv"
representations_path: "data/gathered_embs_ankh_tps_embs_avg.h5"
per_class_optimization: false
reuse_existing_partial_results: false
